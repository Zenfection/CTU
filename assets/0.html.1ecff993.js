import{_ as n,o as s,c as a,e as t}from"./app.df04e054.js";const p={},o=t(`<h1 id="chuan-bi" tabindex="-1"><a class="header-anchor" href="#chuan-bi" aria-hidden="true">#</a> Chu\u1EA9n b\u1ECB</h1><h2 id="nhung-thu-vien-phai-co" tabindex="-1"><a class="header-anchor" href="#nhung-thu-vien-phai-co" aria-hidden="true">#</a> Nh\u1EEFng th\u01B0 vi\u1EC7n ph\u1EA3i c\xF3</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>   <span class="token comment">// th\u01B0 vi\u1EC7n c\u01A1 b\u1EA3n c\u1EE7a C</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span> <span class="token comment">// h\u1ED7 tr\u1EE3 true/false cho C</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">50</span>       </span><span class="token comment">// c\xF3 th\u1EC3 thay th\u1EBF</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thu-vien-list-h" tabindex="-1"><a class="header-anchor" href="#thu-vien-list-h" aria-hidden="true">#</a> Th\u01B0 vi\u1EC7n <code>list.h</code></h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//c\u1EA5u tr\xFAc danh s\xE1chs</span>
    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>List<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//t\u1EA1o danh s\xE1ch r\u1ED7ng</span>
    L<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">emptyList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//ki\u1EC3m tra danh s\xE1ch r\u1ED7ng</span>
    <span class="token keyword">return</span> L<span class="token punctuation">.</span>Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//th\xEAm x v\xE0o trong danh s\xE1ch</span>
    L<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>L<span class="token operator">-&gt;</span>Size<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">elementAt</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//l\u1EA5y t\u1EEB ph\u1EA7n t\u1EED \u0111\u1EA7u ti\xEAn trong danh s\xE1ch </span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">memberList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//ki\u1EC3m tra x c\xF3 trong danh s\xE1ch kh\xF4ng</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//ki\u1EC3m tra c\xF3 ph\u1EA7n t\u1EED n\xE0o trong L1 c\xF3 trong L2 kh\xF4ng</span>
bool <span class="token function">memberDoubleList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List L2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L1<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memberList</span><span class="token punctuation">(</span>L1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> L2<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">printPath</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// in danh s\xE1ch ra</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">copyList</span><span class="token punctuation">(</span>List  <span class="token operator">*</span>L1<span class="token punctuation">,</span>  List  <span class="token operator">*</span>L2<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// copy danh s\xE1ch L1 qua L2</span>
    <span class="token function">makeNullList</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L1<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> L1<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">insertList</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>	
<span class="token keyword">int</span> <span class="token function">getPos</span><span class="token punctuation">(</span>List L<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//tr\u1EA3 v\u1EC1 v\u1ECB tr\xED c\u1EE7a ph\u1EA7n t\u1EED x trong danh s\xE1ch</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// n\u1EBFu kh\xF4ng c\xF3 tr\u1EA3 v\u1EC1 -1</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">maxList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//tr\u1EA3 v\u1EC1 ph\u1EA7n t\u1EED l\u1EDBn nh\u1EA5t trong danh s\xE1ch</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            max <span class="token operator">=</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">minList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// tr\u1EA3 v\u1EC1 ph\u1EA7n t\u1EED nh\u1ECF nh\u1EA5t trong danh s\xE1ch</span>
    <span class="token keyword">int</span> min <span class="token operator">=</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">&gt;</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            min <span class="token operator">=</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">sumList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//t\xEDnh t\u1ED5ng c\xE1c ph\u1EA7n t\u1EED trong danh s\xE1ch</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> L<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thu-vien-stack-h" tabindex="-1"><a class="header-anchor" href="#thu-vien-stack-h" aria-hidden="true">#</a> Th\u01B0 vi\u1EC7n <code>stack.h</code></h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//c\u1EA5u tr\xFAc c\u1EE7a ng\u0103n x\u1EBFp</span>
    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Stack<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">makeNullStack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//t\u1EA1o ng\u0103n x\u1EBFp r\u1ED7ng</span>
    S<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">emptyStack</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//ki\u1EC3m tra ng\u0103n x\u1EBFp r\u1ED7ng kh\xF4ng</span>
    <span class="token keyword">return</span> S<span class="token punctuation">.</span>Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">pushStack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//th\xEAm x v\xE0o ng\u0103n x\u1EBFp</span>
    S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>Size<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">pullStack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//l\u1EA5y x ra t\u1EEB ng\u0103n x\u1EBFp</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">memberStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//ki\u1EC3m tra x c\xF3 trong ng\u0103n x\u1EBFp kh\xF4ng</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),e=[o];function c(i,l){return s(),a("div",null,e)}var k=n(p,[["render",c],["__file","0.html.vue"]]);export{k as default};
