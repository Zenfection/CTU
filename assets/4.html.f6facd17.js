import{_ as p,r as o,o as c,c as i,a as n,d as t,e,b as s}from"./app.df04e054.js";const l={},u=e('<h1 id="bai-4-hang-\u0111oi" tabindex="-1"><a class="header-anchor" href="#bai-4-hang-\u0111oi" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-17-32-icons8-joining_queue.png" width="40"> B\xE0i 4. H\xE0ng \u0111\u1EE3i</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> M\xF4 h\xECnh</h2>',2),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"G\u1ED2M 2 LO\u1EA0I",-1),k={href:"https://www.cs.usfca.edu/~galles/visualization/QueueArray.html",target:"_blank",rel:"noopener noreferrer"},v=s("Queue-ArrayList"),m=s(" - "),h=n("em",null,"Ng\u0103n x\u1EBFp c\xE0i \u0111\u1EB7t theo danh s\xE1ch \u0111\u1EB7c",-1),b={href:"https://www.cs.usfca.edu/~galles/visualization/QueueLL.html",target:"_blank",rel:"noopener noreferrer"},g=s("Queue-LinkedList"),_=s(" - "),f=n("em",null,"Ng\u0103n x\u1EBFp c\xE0i \u0111\u1EA1t theo danh s\xE1ch li\xEAn k\u1EBFt",-1),Q={id:"ly-thuyet",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),w=s(),x=n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),N={href:"https://nguyenvanhieu.vn/hang-doi-queue/",target:"_blank",rel:"noopener noreferrer"},R=s("L\xFD thuy\u1EBFt"),T=n("h2",{id:"source-code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),s(),n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),s(" Source Code")],-1),H={id:"queue-h",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#queue-h","aria-hidden":"true"},"#",-1),q=s(),P={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/Queue/queue.h",target:"_blank",rel:"noopener noreferrer"},V=s("queue.h"),G=e(`<div class="custom-container tip"><p class="custom-container-title">C\u1EA4U TR\xDAC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max_length</span> <span class="token expression"><span class="token number">50</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>Max_length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> Front<span class="token punctuation">;</span>
    <span class="token keyword">int</span> Rear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Queue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">KH\u1EDEI T\u1EA0O R\u1ED8NG H\xC0NG \u0110\u1EE2I</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Q<span class="token operator">-&gt;</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>Rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">HI\u1EC2N TH\u1ECA H\xC0NG \u0110\u1EE2I</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayQueue</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">NH\u1EACP N PH\u1EA6N T\u1EEC V\xC0O H\xC0NG \u0110\u1EE2I</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Q<span class="token operator">-&gt;</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Q<span class="token operator">-&gt;</span>Rear <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH\xC8N PH\u1EA6N T\u1EEC X V\xC0O V\u1ECA TR\xCD P TRONG H\xC0NG \u0110\u1EE2I</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> p <span class="token operator">&gt;</span> Q<span class="token operator">-&gt;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Postion Invalid !!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>Rear <span class="token operator">==</span> Max_length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Full Queue!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
        Q<span class="token operator">-&gt;</span>Rear<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">TR\u1EA2 V V\u1ECA TR\xCD C\u1EE6A PH\u1EA6N T\u1EEC X</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>Front <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token operator">-&gt;</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 PH\u1EA6N T\u1EEC T\u1EA0I V\u1ECA TR\xCD P TRONG H\xC0NG \u0110\u1EE2I</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteQueue_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token operator">-&gt;</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Q<span class="token operator">-&gt;</span>Rear<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 PH\u1EA6N T\u1EEC X TRONG PH\u1EA6N T\u1EEC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteQueue_byValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">locateQueue</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">deleteQueue_byPos</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,8);function L(O,C){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("div",r,[d,n("ul",null,[n("li",null,[n("p",null,[n("a",k,[v,t(a)]),m,h])]),n("li",null,[n("p",null,[n("a",b,[g,t(a)]),_,f])])])]),n("h2",Q,[y,w,x,n("a",N,[R,t(a)])]),T,n("h3",H,[I,q,n("a",P,[V,t(a)])]),G])}var F=p(l,[["render",L],["__file","4.html.vue"]]);export{F as default};
