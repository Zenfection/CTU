import{_ as e,r as o,o as c,c as i,a as n,d as t,e as p,b as s}from"./app.df04e054.js";const l={},u=p('<h1 id="bai-2-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#bai-2-danh-sach-lien-ket" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-16-51-icons8-link.png" width="40"> B\xE0i 2. Danh s\xE1ch li\xEAn k\u1EBFt</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> M\xF4 h\xECnh</h2>',2),r={class:"custom-container tip"},k=n("p",{class:"custom-container-title"},"\u{1F4A1} M\u1EB8O",-1),d=s("B\u1EA1n c\xF3 th\u1EC3 tham kh\u1EA3o v\xE0 th\u1EF1c h\xE0nh theo m\xF4 h\xECnh "),v=n("code",null,"Linked List",-1),m=s(),b={href:"https://visualgo.net/en/list",target:"_blank",rel:"noopener noreferrer"},g=s("t\u1EA1i \u0111\xE2y"),N={id:"ly-thuyet",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),L=s(),y=n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),h={href:"https://nguyenvanhieu.vn/danh-sach-lien-ket-don/",target:"_blank",rel:"noopener noreferrer"},f=s("L\xFD thuy\u1EBFt"),S=n("h2",{id:"source-code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),s(),n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),s(" Source Code")],-1),x={id:"linkedlist-h",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#linkedlist-h","aria-hidden":"true"},"#",-1),H=s(),T={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/LinkedList/linkedList.h",target:"_blank",rel:"noopener noreferrer"},U=s("linkedList.h"),C=p(`<div class="custom-container tip"><p class="custom-container-title">C\u1EA4U TR\xDAC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token operator">*</span> Next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> Node<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>Tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>List<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">KH\u1EDEI T\u1EA0O R\u1ED6NG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">HI\u1EC2N TH\u1ECA DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Size = %d&quot;</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1EA0O M\u1ED8T NODE V\u1EDAI PH\u1EA6N T\u1EEC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Node <span class="token operator">*</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>newnode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
    newnode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH\xCAM NODE V\xC0O \u0110\u1EA6U HO\u1EB6C CU\u1ED0I DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">insertList_End</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        L<span class="token operator">-&gt;</span>Tail<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>Tail<span class="token operator">=</span>newNode<span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH\xCAM NODE V\xC0O V\u1ECA TR\xCD P TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertList_End</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH\xCAM N NODE V\xC0O DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">KI\u1EC2M TRA X TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\xCCM V\u1ECA TR\xCD NODE CH\u1EE8A X</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 NODE C\xD3 V\u1ECA TR\xCD P TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                L<span class="token operator">-&gt;</span>Head<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                prev<span class="token operator">-&gt;</span>Next<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            L<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 NODE TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 NODE C\xD3 PH\u1EA6N T\u1EEC X TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1ED0I \u01AFU DANH S\xC1CH (\`1 2 1\` -&gt; \`1 2\`)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">optimizeList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp1 <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp2 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>data <span class="token operator">==</span> temp2<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            temp2 <span class="token operator">=</span> temp2<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp1 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\xCCM NODE C\xD3 PH\u1EA6N T\u1EEC L\u1EDAN NH\u1EA4T HO\u1EB6C NH\u1ECE NH\u1EA4T</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Find_Max</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Find_Min</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">&gt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
            min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHUY\u1EC2N SANG DANH S\xC1CH KH\xC1C</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">changeList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">G\u1ED8P 2 DANH S\xC1CH TH\xC0NH 1 DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List L2<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">changeList</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeList</span><span class="token punctuation">(</span>L2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">L\u1ECCC S\u1ED0 CH\u1EB4N HO\u1EB6C L\u1EBA QUA DANH S\xC1CH KH\xC1C</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">filter_evenNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">filter_oddNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\xCDNH T\u1ED4NG TRUNG B\xCCNH PH\u1EA6N T\u1EEC TRONG DANH S\xC1CH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">averageList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">+=</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token operator">/</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,18),O={id:"sentencelist-h",tabindex:"-1"},D=n("a",{class:"header-anchor",href:"#sentencelist-h","aria-hidden":"true"},"#",-1),z=s(),R={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/LinkedList/sentenceList.h",target:"_blank",rel:"noopener noreferrer"},E=s("sentenceList.h"),P=p(`<div class="custom-container tip"><p class="custom-container-title">C\u1EA4U TR\xDAC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> Word<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">NODE</span> <span class="token operator">*</span>Next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> Node<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>Tail<span class="token punctuation">;</span>
    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Sentence<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1EA0O R\u1ED6NG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    S<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">HI\u1EC2N TH\u1ECA C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displaySentence</span><span class="token punctuation">(</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Size = %d&quot;</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1EA0O M\u1ED8T NODE X L\xC0 T\u1EEA</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Node <span class="token operator">*</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newNode<span class="token operator">-&gt;</span>Word <span class="token operator">=</span> c<span class="token punctuation">;</span>
    newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH\xC8N M\u1ED8T T\u1EEA V\xC0O \u0110\u1EA6U HO\u1EB6C CU\u1ED0I C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertSentence_Frist</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">insertSentence_End</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        S<span class="token operator">-&gt;</span>Tail<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        S<span class="token operator">-&gt;</span>Tail<span class="token operator">=</span>newNode<span class="token punctuation">;</span>
        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH\xC8N T\u1EEA V\u1ECA TR\xCD P TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertSentence_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertSentence_Frist</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> S<span class="token operator">-&gt;</span>Size<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">insertSentence_End</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
                temp<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
                S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">NH\u1EACP C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insertSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">KI\u1EC2M TRA T\u1EEA X C\xD3 TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberSentence</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\xCCM V\u1ECA TR\xCD T\u1EEA X TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateSentence</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 T\u1EEA V\u1ECA TR\xCD P TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                S<span class="token operator">-&gt;</span>Head<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                prev<span class="token operator">-&gt;</span>Next<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            S<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 T\u1EEA X TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 M\u1ED8T NODE TRONG C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO\xC1 KHO\u1EA2NG TR\u1EAENG D\u01AF TH\u1EEAA</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteWhiteSpace</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Next<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHU\u1EA8N HO\xC1 C\xC2U</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">normalizeSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">deleteWhiteSpace</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp<span class="token operator">-&gt;</span>Word <span class="token operator">-=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                temp<span class="token operator">-&gt;</span>Word <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                temp<span class="token operator">-&gt;</span>Word <span class="token operator">-=</span> <span class="token number">32</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,14);function A(G,W){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("div",r,[k,n("p",null,[d,v,m,n("a",b,[g,t(a)])])]),n("h2",N,[w,L,y,n("a",h,[f,t(a)])]),S,n("h3",x,[_,H,n("a",T,[U,t(a)])]),C,n("h3",O,[D,z,n("a",R,[E,t(a)])]),P])}var q=e(l,[["render",A],["__file","2.html.vue"]]);export{q as default};
