import{_ as o,r as e,o as c,c as l,a as n,d as t,e as p,b as s}from"./app.cafd9fae.js";const i={},r=p('<h1 id="bai-6-cay-nhi-phan-avl" tabindex="-1"><a class="header-anchor" href="#bai-6-cay-nhi-phan-avl" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-18-13-icons8-tree_structure.png" width="40"> B\xE0i 6. C\xE2y nh\u1ECB ph\xE2n AVL</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> M\xF4 h\xECnh</h2>',2),u={class:"custom-container tip"},k=n("p",{class:"custom-container-title"},"DATA VISUALIZATION",-1),d=s("M\xF4 h\xECnh "),v={href:"https://www.cs.usfca.edu/~galles/visualization/AVLtree.html",target:"_blank",rel:"noopener noreferrer"},m=s("t\u1EA1i \u0111\xE2y"),b={id:"ly-thuyet",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),h=s(),y=n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),T={href:"https://vietjack.com/cau-truc-du-lieu-va-giai-thuat/giai-thuat-cay-avl.jsp",target:"_blank",rel:"noopener noreferrer"},w=s("L\xFD thuy\u1EBFt"),L=n("h2",{id:"source-code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),s(),n("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),s(" Source Code")],-1),f={id:"treeavl-h",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#treeavl-h","aria-hidden":"true"},"#",-1),R=s(),V={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/AVL/treeAVL.h",target:"_blank",rel:"noopener noreferrer"},A=s("treeAVL.h"),H=p(`<div class="custom-container tip"><p class="custom-container-title">C\u1EA4U TR\xDAC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LH</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span>   </span><span class="token comment">//? C\xE2y con tr\xE1i cao h\u01A1n</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EH</span> <span class="token expression"><span class="token number">0</span>    </span><span class="token comment">//? Hai c\xE2y con b\u1EB1ng nhau</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RH</span> <span class="token expression"><span class="token number">1</span>    </span><span class="token comment">//? C\xE2y con ph\u1EA3i cao h\u01A1n</span></span>
<span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> balFactor<span class="token punctuation">;</span> <span class="token comment">//! ch\u1EC9 s\u1ED1 c\u0103n b\u1EB1ng</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>Left<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>Right<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>AVLTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1EA0O R\u1ED8NG TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullAVLTree</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH\xC8N AVLNODE V\xC0O AVLTREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree T <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">balanceLeft</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">balanceRight</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">T\u1EA0O TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>AVLTree <span class="token function">createAVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree root<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">makeNullAVLTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">3 KI\u1EC2U DUY\u1EC6T TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// duy\u1EC7t ti\u1EC1n t\u1EF1</span>
<span class="token keyword">void</span> <span class="token function">NLR</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// duy\u1EC7t trung t\u1EF1</span>
<span class="token keyword">void</span> <span class="token function">LNR</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// duy\u1EC7t h\u1EADu t\u1EF1</span>
<span class="token keyword">void</span> <span class="token function">LRN</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">4 KI\u1EC2U C\xC2N B\u1EB0NG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// c\u0103n b\u1EB1ng tr\xE1i tr\xE1i</span>
<span class="token keyword">void</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//* Left-Left =&gt; quay ph\u1EA3i</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>

    T<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>
    T1<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// c\u0103n b\u1EB1ng tr\xE1i ph\u1EA3i</span>
<span class="token keyword">void</span> <span class="token function">rorateLR</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>
    AVLTree T2 <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>

    T<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>
    T2<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T<span class="token punctuation">;</span>
    T1<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>
    T2<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T1<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T2<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T2<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// c\u0103n b\u1EB1ng ph\u1EA3i ph\u1EA3i</span>
<span class="token keyword">void</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//* Right-Right =&gt; quay tr\xE1i</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>

    T<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>
    T1<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// c\u0103n b\u1EB1ng ph\u1EA3i tr\xE1i</span>
<span class="token keyword">void</span> <span class="token function">rorateRL</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>
    AVLTree T2 <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>

    T<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>
    T2<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T<span class="token punctuation">;</span>
    T1<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>
    T2<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T1<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T2<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T2<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">2 KI\u1EC2U C\u0102N B\u1EB0NG T\u1EF0 \u0110\u1ED8NG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// c\xE2n b\u1EB1ng t\u1EF1 \u0111\u1ED9ng tr\xE1i</span>
<span class="token keyword">int</span> <span class="token function">balanceLeft</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">rorateLR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// c\xE2n b\u1EB1ng t\u1EF1 \u0111\u1ED9ng ph\u1EA3i</span>
<span class="token keyword">int</span> <span class="token function">balanceRight</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">rorateRL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EH<span class="token operator">:</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,7);function N(E,F){const a=e("ExternalLinkIcon");return c(),l("div",null,[r,n("div",u,[k,n("p",null,[d,n("a",v,[m,t(a)])])]),n("h2",b,[g,h,y,n("a",T,[w,t(a)])]),L,n("h3",f,[_,R,n("a",V,[A,t(a)])]),H])}var U=o(i,[["render",N],["__file","6.html.vue"]]);export{U as default};
